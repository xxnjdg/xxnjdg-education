<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.xxnjdg.notp.user.mapper.LecturerProfitMapper">
  <resultMap id="BaseResultMap" type="io.xxnjdg.notp.user.model.LecturerProfit">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="gmt_create" jdbcType="TIMESTAMP" property="gmtCreate" />
    <result column="lecturer_user_no" jdbcType="BIGINT" property="lecturerUserNo" />
    <result column="bank_card_no" jdbcType="VARCHAR" property="bankCardNo" />
    <result column="bank_name" jdbcType="VARCHAR" property="bankName" />
    <result column="bank_branch_name" jdbcType="VARCHAR" property="bankBranchName" />
    <result column="bank_user_name" jdbcType="VARCHAR" property="bankUserName" />
    <result column="bank_id_card_no" jdbcType="VARCHAR" property="bankIdCardNo" />
    <result column="lecturer_profit" jdbcType="DECIMAL" property="lecturerProfit" />
    <result column="platform_profit" jdbcType="DECIMAL" property="platformProfit" />
    <result column="profit_status" jdbcType="TINYINT" property="profitStatus" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, gmt_create, lecturer_user_no, bank_card_no, bank_name, bank_branch_name, bank_user_name, 
    bank_id_card_no, lecturer_profit, platform_profit, profit_status, remark
  </sql>
  <select id="selectByExample" parameterType="io.xxnjdg.notp.user.model.LecturerProfitExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from lecturer_profit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from lecturer_profit
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from lecturer_profit
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="io.xxnjdg.notp.user.model.LecturerProfitExample">
    delete from lecturer_profit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.xxnjdg.notp.user.model.LecturerProfit">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into lecturer_profit (gmt_create, lecturer_user_no, bank_card_no, 
      bank_name, bank_branch_name, bank_user_name, 
      bank_id_card_no, lecturer_profit, platform_profit, 
      profit_status, remark)
    values (#{gmtCreate,jdbcType=TIMESTAMP}, #{lecturerUserNo,jdbcType=BIGINT}, #{bankCardNo,jdbcType=VARCHAR}, 
      #{bankName,jdbcType=VARCHAR}, #{bankBranchName,jdbcType=VARCHAR}, #{bankUserName,jdbcType=VARCHAR}, 
      #{bankIdCardNo,jdbcType=VARCHAR}, #{lecturerProfit,jdbcType=DECIMAL}, #{platformProfit,jdbcType=DECIMAL}, 
      #{profitStatus,jdbcType=TINYINT}, #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.xxnjdg.notp.user.model.LecturerProfit">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into lecturer_profit
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="gmtCreate != null">
        gmt_create,
      </if>
      <if test="lecturerUserNo != null">
        lecturer_user_no,
      </if>
      <if test="bankCardNo != null">
        bank_card_no,
      </if>
      <if test="bankName != null">
        bank_name,
      </if>
      <if test="bankBranchName != null">
        bank_branch_name,
      </if>
      <if test="bankUserName != null">
        bank_user_name,
      </if>
      <if test="bankIdCardNo != null">
        bank_id_card_no,
      </if>
      <if test="lecturerProfit != null">
        lecturer_profit,
      </if>
      <if test="platformProfit != null">
        platform_profit,
      </if>
      <if test="profitStatus != null">
        profit_status,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="gmtCreate != null">
        #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="lecturerUserNo != null">
        #{lecturerUserNo,jdbcType=BIGINT},
      </if>
      <if test="bankCardNo != null">
        #{bankCardNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranchName != null">
        #{bankBranchName,jdbcType=VARCHAR},
      </if>
      <if test="bankUserName != null">
        #{bankUserName,jdbcType=VARCHAR},
      </if>
      <if test="bankIdCardNo != null">
        #{bankIdCardNo,jdbcType=VARCHAR},
      </if>
      <if test="lecturerProfit != null">
        #{lecturerProfit,jdbcType=DECIMAL},
      </if>
      <if test="platformProfit != null">
        #{platformProfit,jdbcType=DECIMAL},
      </if>
      <if test="profitStatus != null">
        #{profitStatus,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.xxnjdg.notp.user.model.LecturerProfitExample" resultType="java.lang.Long">
    select count(*) from lecturer_profit
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update lecturer_profit
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.gmtCreate != null">
        gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lecturerUserNo != null">
        lecturer_user_no = #{record.lecturerUserNo,jdbcType=BIGINT},
      </if>
      <if test="record.bankCardNo != null">
        bank_card_no = #{record.bankCardNo,jdbcType=VARCHAR},
      </if>
      <if test="record.bankName != null">
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankBranchName != null">
        bank_branch_name = #{record.bankBranchName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankUserName != null">
        bank_user_name = #{record.bankUserName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankIdCardNo != null">
        bank_id_card_no = #{record.bankIdCardNo,jdbcType=VARCHAR},
      </if>
      <if test="record.lecturerProfit != null">
        lecturer_profit = #{record.lecturerProfit,jdbcType=DECIMAL},
      </if>
      <if test="record.platformProfit != null">
        platform_profit = #{record.platformProfit,jdbcType=DECIMAL},
      </if>
      <if test="record.profitStatus != null">
        profit_status = #{record.profitStatus,jdbcType=TINYINT},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update lecturer_profit
    set id = #{record.id,jdbcType=BIGINT},
      gmt_create = #{record.gmtCreate,jdbcType=TIMESTAMP},
      lecturer_user_no = #{record.lecturerUserNo,jdbcType=BIGINT},
      bank_card_no = #{record.bankCardNo,jdbcType=VARCHAR},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_branch_name = #{record.bankBranchName,jdbcType=VARCHAR},
      bank_user_name = #{record.bankUserName,jdbcType=VARCHAR},
      bank_id_card_no = #{record.bankIdCardNo,jdbcType=VARCHAR},
      lecturer_profit = #{record.lecturerProfit,jdbcType=DECIMAL},
      platform_profit = #{record.platformProfit,jdbcType=DECIMAL},
      profit_status = #{record.profitStatus,jdbcType=TINYINT},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.xxnjdg.notp.user.model.LecturerProfit">
    update lecturer_profit
    <set>
      <if test="gmtCreate != null">
        gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      </if>
      <if test="lecturerUserNo != null">
        lecturer_user_no = #{lecturerUserNo,jdbcType=BIGINT},
      </if>
      <if test="bankCardNo != null">
        bank_card_no = #{bankCardNo,jdbcType=VARCHAR},
      </if>
      <if test="bankName != null">
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankBranchName != null">
        bank_branch_name = #{bankBranchName,jdbcType=VARCHAR},
      </if>
      <if test="bankUserName != null">
        bank_user_name = #{bankUserName,jdbcType=VARCHAR},
      </if>
      <if test="bankIdCardNo != null">
        bank_id_card_no = #{bankIdCardNo,jdbcType=VARCHAR},
      </if>
      <if test="lecturerProfit != null">
        lecturer_profit = #{lecturerProfit,jdbcType=DECIMAL},
      </if>
      <if test="platformProfit != null">
        platform_profit = #{platformProfit,jdbcType=DECIMAL},
      </if>
      <if test="profitStatus != null">
        profit_status = #{profitStatus,jdbcType=TINYINT},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.xxnjdg.notp.user.model.LecturerProfit">
    update lecturer_profit
    set gmt_create = #{gmtCreate,jdbcType=TIMESTAMP},
      lecturer_user_no = #{lecturerUserNo,jdbcType=BIGINT},
      bank_card_no = #{bankCardNo,jdbcType=VARCHAR},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_branch_name = #{bankBranchName,jdbcType=VARCHAR},
      bank_user_name = #{bankUserName,jdbcType=VARCHAR},
      bank_id_card_no = #{bankIdCardNo,jdbcType=VARCHAR},
      lecturer_profit = #{lecturerProfit,jdbcType=DECIMAL},
      platform_profit = #{platformProfit,jdbcType=DECIMAL},
      profit_status = #{profitStatus,jdbcType=TINYINT},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>